@model List<BeautySaloon.ViewModel.WorkScheduleViewModel>

@{
Layout = null;
}
<html lang="ru">
<head>
    @Html.Partial("_AdminHeadPartial")
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>

@Html.Partial("_HeaderPartial")

<body>
<input type="hidden" id="workerId" value="@ViewBag.WorkerId" />
<input type="hidden" id="workerName" value="@ViewBag.WorkerName" />
<div class="container">
    <div id="calendar"></div>
</div>

@Html.Partial("_EventModalPartial")

<script>
    document.addEventListener('DOMContentLoaded', function() {
        var initialLocaleCode = 'ru';
        var calendarEl = document.getElementById('calendar');
        var workerId = document.getElementById('workerId').value;
        var workerName = document.getElementById('workerName').value;

        var events = @Html.Raw(Json.Serialize(
        Model.Select(schedule => new
        {
        publicId = schedule.Id,
        title = $"Клиент: {schedule.Client.FullName} Услуга: {schedule.Service.Name}",
        start = schedule.WorkDate.ToString("yyyy-MM-dd") + "T" + schedule.StartTime,
        end = schedule.WorkDate.ToString("yyyy-MM-dd") + "T" + schedule.EndTime
        })
                     ));

        var calendar = new FullCalendar.Calendar(calendarEl, {
            locale: initialLocaleCode,
            initialView: 'timeGridWeek',
            headerToolbar: {
                start: 'timeGridWeek',
                center: 'title',
                end: 'prev,next'
            },
            buttonText: {
                today: 'Сегодня',
                month: 'Месяц',
                week: 'Неделя',
                day: 'День',
                list: 'Список'
            },
            weekText: 'Нед',
            allDayText: 'Весь день',
            moreLinkText: function(n) {
                return '+ ещё ' + n;
            },
            titleFormat: function(date) {
                return workerName + ' - ' + date.start.marker.toLocaleDateString('ru', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric'
                }) + ' - ' + date.end.marker.toLocaleDateString('ru', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric'
                });
            },
            noEventsText: 'Нет событий для отображения',
            events: events,
            dateClick: function(info) {
            console.log(info);
                loadServices();
                loadClients(); // Загрузка пользователей перед показом модального окна
                const myModal = new bootstrap.Modal(document.getElementById('eventModal'));
                var dataFromModal;
                myModal.show();
                
                document.getElementById('saveEventButton').addEventListener('click', function handleSaveClick() {
                        const clientId = document.getElementById('userSelect').value;
                        const serviceId = document.getElementById('serviceSelect').value;
                        const startTime = document.getElementById('startTime').value;

                        dataFromModal = {
                            workerId: workerId,
                            clientId: clientId,
                            serviceId: serviceId,
                            workDate: info.dateStr,
                            startTime: startTime
                        };
                        console.log(dataFromModal);
                        myModal.hide();
                        document.getElementById('saveEventButton').removeEventListener('click', handleSaveClick);

                    console.log(dataFromModal);
                    $.ajax({
                        url: '@Url.Action("SaveSchedule", "AdminSchedule")',
                        method: 'POST',
                        data: dataFromModal,
                        success: function ()
                        {
                            calendar.refetchEvents();
                        },
                        error: function ()
                        {
                            alert("Ошибка при добавлении данных");
                        }
                    })
                });
            },
            eventClick: function(info) {
                var event = info.event;
                var newStartTime = prompt("Введите новое время начала работы (HH:MM):", event.start.toISOString().substring(11, 16));
                var newEndTime = prompt("Введите новое время окончания работы (HH:MM):", event.end.toISOString().substring(11, 16));

                if (newStartTime && newEndTime) {
                    $.ajax({
                        url: '@Url.Action("UpdateSchedule", "AdminSchedule")',
                        method: 'POST',
                        data: {
                            WorkerId: workerId,
                            workScheduleId: event.extendedProps.publicId,
                            StartTime: newStartTime,
                            EndTime: newEndTime
                        },
                        success: function() {
                            event.setStart(newStartTime)
                            event.setEnd(newEndTime)
                            calendar.refetchEvents(); // Перезагрузка событий календаря
                        },
                        error: function() {
                            alert("Ошибка при обновлении данных");
                        }
                    });
                }
            }
        });

        calendar.render();

        function loadClients() {
            $.ajax({
                url: '@Url.Action("GetAllClients", "AdminSchedule")',
                method: 'GET',
                success: function(data) {
                    var userSelect = document.getElementById('userSelect');
                    userSelect.innerHTML = ''; // Очистка списка
                    data.forEach(function(user) {
                    console.log(user);
                        var option = document.createElement('option');
                        option.value = user.id;
                        option.textContent = user.firstName + user.secondName + user.lastName;
                        userSelect.appendChild(option);
                    });
                },
                error: function() {
                    alert("Ошибка при загрузке пользователей");
                }
            });
        }

        function loadServices() {
            $.ajax({
                url: '@Url.Action("GetAllService", "AdminSchedule")',
                method: 'GET',
                success: function(data) {
                    var serviceSelect = document.getElementById('serviceSelect');
                    serviceSelect.innerHTML = ''; // Очистка списка
                    data.forEach(function(service) {
                        var option = document.createElement('option');
                        option.value = service.id;
                        option.textContent = service.name;
                        serviceSelect.appendChild(option);
                    });
                },
                error: function() {
                    alert("Ошибка при загрузке услуг");
                }
            });
        }
    });
</script>
</body>
</html>
