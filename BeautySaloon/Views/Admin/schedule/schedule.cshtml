@model List<BeautySaloon.ViewModel.WorkScheduleViewModel>

@{
Layout = null;
}
<html lang="ru">

@await Html.PartialAsync("_AdminHeadPartial")

@await Html.PartialAsync("_HeaderPartial")

<body>
<input type="hidden" id="workerId" value="@ViewBag.WorkerId"/>
<input type="hidden" id="workerName" value="@ViewBag.WorkerName"/>
<div class="container">
    <div id="calendar"></div>
</div>

@await Html.PartialAsync("_EventModalPartial")

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const myModalEl = document.getElementById('eventModal');
        const myModal = new bootstrap.Modal(myModalEl);
        const deleteEventButton = $('#deleteEventButton');
        const closeEventButton = $('#closeEventButton');
        const saveEventButton = $('#saveEventButton');
        const eventIdHiddenInput = $('#eventId');

        loadServices();
        loadClients();

        const initialLocaleCode = 'ru';
        const calendarEl = document.getElementById('calendar');
        const workerId = document.getElementById('workerId').value;
        const workerName = document.getElementById('workerName').value;

        const events = @Html.Raw(Json.Serialize(
                           Model.Select(schedule => new
                           {
                               publicId = schedule.Id,
                               title = $"Клиент: {schedule.Client.FullName} Услуга: {schedule.Service.Name}",
                               start = schedule.WorkDate.ToString("yyyy-MM-dd") + "T" + schedule.StartTime,
                               end = schedule.WorkDate.ToString("yyyy-MM-dd") + "T" + schedule.EndTime
                           })
                       ));

        const calendar = new FullCalendar.Calendar(calendarEl, {
            locale: initialLocaleCode,
            initialView: 'timeGridWeek',
            headerToolbar: {
                start: 'timeGridWeek',
                center: 'title',
                end: 'prev,next'
            },
            buttonText: {
                today: 'Сегодня',
                month: 'Месяц',
                week: 'Неделя',
                day: 'День',
                list: 'Список'
            },
            nowIndicator: true,
            businessHours: true,
            weekText: 'Нед',
            allDayText: 'Весь день',
            moreLinkText: n => `+ ещё ${n}`,
            eventMouseEnter: function(info) {
                const tooltip = new bootstrap.Tooltip(info.el, {
                    title: info.event.title,
                    placement: 'top',
                    trigger: 'hover',
                    container: 'body',
                    html: true,
                    template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>'
                });
                // Сохраняем ссылку на тултип в элементе, чтобы можно было его удалить позже
                info.el._tooltip = tooltip;
            },
            eventMouseLeave: function(info) {
                // Удаляем тултип при уходе курсора
                if (info.el._tooltip) {
                    info.el._tooltip.dispose();
                    delete info.el._tooltip;
                }
            },
            titleFormat: date => `${workerName} - ${date.start.marker.toLocaleDateString('ru', {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            })} - ${date.end.marker.toLocaleDateString('ru', {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            })}`,
            noEventsText: 'Нет событий для отображения',
            events: events,
            dateClick: handleDateClick,
            eventClick: handleEventClick
        });

        calendar.render();

        function handleDateClick(info) {
            deleteEventButton.hide();
            myModal.show();

            closeEventButton.off('click').on('click', () => myModal.hide());
            saveEventButton.off('click').on('click', () => {
                const clientId = document.getElementById('userSelect').value;
                const serviceId = document.getElementById('serviceSelect').value;
                const startTime = document.getElementById('startTime').value;

                const dataFromModal = {
                    workerId: workerId,
                    clientId: clientId,
                    serviceId: serviceId,
                    workDate: info.dateStr,
                    startTime: startTime
                };

                myModal.hide();

                $.ajax({
                    url: '@Url.Action("SaveSchedule", "AdminSchedule")',
                    method: 'POST',
                    data: dataFromModal,
                    success: function (data) {
                        const newEvent = {
                            publicId: data.id,
                            title: data.title,
                            start: data.start,
                            end: data.end
                        };
                        calendar.addEvent(newEvent);
                        calendar.refetchEvents();
                    },
                    error: function () {
                        alert("Ошибка при добавлении данных");
                    }
                });
            });
        }

        function handleEventClick(info) {
            eventIdHiddenInput.val(info.event._def.extendedProps.publicId);
            deleteEventButton.show();
            const event = info.event;
            loadInfoAboutSchedule(event._def.extendedProps.publicId);

            deleteEventButton.off('click').on('click', () => {
                $.ajax({
                    url: '@Url.Action("DeleteById", "AdminSchedule")',
                    type: 'POST',
                    data: { id: info.event._def.extendedProps.publicId },
                    success: function(result) {
                        if (result) {
                            event.remove();
                            calendar.refetchEvents();
                            alert('Событие успешно удалено');
                            myModal.hide();
                        } else {
                            alert('Произошла ошибка при удалении события');
                        }
                    },
                    error: function(xhr, status, error) {
                        alert('Произошла ошибка при удалении события');
                    }
                });
            });

            saveEventButton.off('click').on('click', () => {
                const clientId = document.getElementById('userSelect').value;
                const serviceId = document.getElementById('serviceSelect').value;
                const startTime = document.getElementById('startTime').value;

                const dataFromModal = {
                    eventId: info.event._def.extendedProps.publicId,
                    workerId: workerId,
                    clientId: clientId,
                    serviceId: serviceId,
                    startTime: startTime
                };

                $.ajax({
                    url: '@Url.Action("UpdateSchedule", "AdminSchedule")',
                    method: 'POST',
                    data: dataFromModal,
                    success: function (data) {
                        const updateEvent = {
                            publicId: data.id,
                            title: data.title,
                            start: data.start,
                            end: data.end
                        };
                        event.setStart(updateEvent.start);
                        event.setEnd(updateEvent.end);
                        event.setProp('title', updateEvent.title);
                        calendar.refetchEvents();
                        myModal.hide();
                    },
                    error: function () {
                        alert("Ошибка при добавлении данных");
                    }
                });
            });

            closeEventButton.off('click').on('click', () => myModal.hide());
            myModal.show();
        }

        function loadClients() {
            $.ajax({
                url: '@Url.Action("GetAllClients", "AdminSchedule")',
                method: 'GET',
                success: function(data) {
                    const userSelect = document.getElementById('userSelect');
                    userSelect.innerHTML = '';
                    data.forEach(user => {
                        const option = document.createElement('option');
                        option.value = user.id;
                        option.textContent = user.fullName;
                        userSelect.appendChild(option);
                    });
                },
                error: function() {
                    alert("Ошибка при загрузке пользователей");
                }
            });
        }

        function loadServices() {
            $.ajax({
                url: '@Url.Action("GetAllService", "AdminSchedule")',
                method: 'GET',
                success: function(data) {
                    const serviceSelect = document.getElementById('serviceSelect');
                    serviceSelect.innerHTML = '';
                    data.forEach(service => {
                        const option = document.createElement('option');
                        option.value = service.id;
                        option.textContent = service.name;
                        serviceSelect.appendChild(option);
                    });
                },
                error: function() {
                    alert("Ошибка при загрузке услуг");
                }
            });
        }

        function loadInfoAboutSchedule(scheduleId) {
            $.ajax({
                url: '@Url.Action("GetScheduleById", "AdminSchedule")',
                method: 'GET',
                data: { scheduleId: scheduleId },
                success: function(data) {
                    const userSelect = document.getElementById('userSelect');
                    [...userSelect.options].forEach(option => {
                        option.selected = option.value === data.client.id;
                    });

                    const serviceSelect = document.getElementById('serviceSelect');
                    [...serviceSelect.options].forEach(option => {
                        option.selected = option.value === data.service.id;
                    });

                    document.getElementById('startTime').value = data.startTime;
                },
                error: function() {
                    alert("Ошибка при загрузке услуг");
                }
            });
        }
    });

</script>
</body>
</html>
